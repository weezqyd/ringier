// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: persister_service.proto

package persister

import (
	messages "github.com/weezqyd/ringier/internal/common/messages"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersistServiceClient is the client API for PersistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersistServiceClient interface {
	Save(ctx context.Context, in *messages.EventRequest, opts ...grpc.CallOption) (*messages.EventResponse, error)
}

type persistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersistServiceClient(cc grpc.ClientConnInterface) PersistServiceClient {
	return &persistServiceClient{cc}
}

func (c *persistServiceClient) Save(ctx context.Context, in *messages.EventRequest, opts ...grpc.CallOption) (*messages.EventResponse, error) {
	out := new(messages.EventResponse)
	err := c.cc.Invoke(ctx, "/persister.PersistService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersistServiceServer is the server API for PersistService service.
// All implementations must embed UnimplementedPersistServiceServer
// for forward compatibility
type PersistServiceServer interface {
	Save(context.Context, *messages.EventRequest) (*messages.EventResponse, error)
	mustEmbedUnimplementedPersistServiceServer()
}

// UnimplementedPersistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersistServiceServer struct {
}

func (UnimplementedPersistServiceServer) Save(context.Context, *messages.EventRequest) (*messages.EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedPersistServiceServer) mustEmbedUnimplementedPersistServiceServer() {}

// UnsafePersistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersistServiceServer will
// result in compilation errors.
type UnsafePersistServiceServer interface {
	mustEmbedUnimplementedPersistServiceServer()
}

func RegisterPersistServiceServer(s grpc.ServiceRegistrar, srv PersistServiceServer) {
	s.RegisterService(&PersistService_ServiceDesc, srv)
}

func _PersistService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/persister.PersistService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistServiceServer).Save(ctx, req.(*messages.EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersistService_ServiceDesc is the grpc.ServiceDesc for PersistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "persister.PersistService",
	HandlerType: (*PersistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _PersistService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "persister_service.proto",
}
